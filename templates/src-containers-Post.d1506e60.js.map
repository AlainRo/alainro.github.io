{"version":3,"sources":["webpack:////Users/alain/Documents/Git/perceptibleNew/src/containers/Observable.js","webpack:////Users/alain/Documents/Git/perceptibleNew/src/containers/Illusion.js","webpack:////Users/alain/Documents/Git/perceptibleNew/src/containers/Hackaviz.js","webpack:////Users/alain/Documents/Git/perceptibleNew/src/containers/Post.js"],"names":["Observable","speed","React","createRef","event","_this","setState","target","valueAsNumber","Component","_this2","this","Runtime","load","notebook","cell","name","Inspector","animationRef","current","fulfilled","value","animationSpeed","nextProps","nextState","state","react_default","a","createElement","className","ref","type","min","max","step","onChange","setSpeed","Illusion","Hackaviz","console","log","withRouteData","_ref","render","post","react_jsx_parser_min_default","jsx","contents","showWarnings","renderInWrapper","components","convert","react","lib","charSet","title"],"mappings":"ggCA4CeA,gVAvCL,CAACC,MAAO,8BACDC,IAAMC,kCAqBV,SAACC,GACVC,EAAKC,SAAS,CAACL,MAAOG,EAAMG,OAAOC,0QAxBdC,kEAIH,IAAAC,EAAAC,KAClBC,IAAQC,KAAKC,IAAU,SAACC,GACtB,MAAkB,cAAdA,EAAKC,KACA,IAAIC,IAAUP,EAAKQ,aAAaC,SAEvB,kBAAdJ,EAAKC,KACA,CAACI,UAAW,SAACC,GAClBX,EAAKY,eAAiBD,SAF1B,+CAQeE,EAAWC,GACxBA,EAAUvB,QAAUU,KAAKc,MAAMxB,QACjCU,KAAKW,eAAeD,MAAQG,EAAUvB,wCASxC,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKnB,KAAKO,eACfQ,EAAAC,EAAAC,cAAA,uBAAejB,KAAKc,MAAMxB,OAC1ByB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,QAAQC,IAAI,IAAIC,IAAI,IAAIC,KAAK,MACvCb,MAAOV,KAAKc,MAAMxB,MAAOkC,SAAUxB,KAAKyB,iyBCXnCC,mWAtBEnC,IAAMC,iWADAM,kEAGD,IAAAC,EAAAC,KAClBC,IAAQC,KAAKC,IAAU,SAACC,GACtB,GAAkB,WAAdA,EAAKC,KACP,OAAO,IAAIC,IAAUP,EAAKQ,aAAaC,4CAS3C,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKnB,KAAKO,qyBCWRoB,mWAxBEpC,IAAMC,iWAFAM,kEAKD,IAAAC,EAAAC,KAClB4B,QAAQC,IAAI,eACZ5B,IAAQC,KAAKC,IAAU,SAACC,GACtB,GAAkB,UAAdA,EAAKC,KACP,OAAO,IAAIC,IAAUP,EAAKQ,aAAaC,4CAS3C,OADAoB,QAAQC,IAAI,gBAEVd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,IAAKnB,KAAKO,sECZ3BuB,kCAAc,SAAAC,GAAY,IACnCC,EADyBC,EAAUF,EAAVE,KAY7B,OATED,EADkB,QAAhBC,EAAKD,OACEjB,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACCmB,IAAKF,EAAKG,SACVC,cAAc,EACdC,iBAAiB,EACjBC,WAAY,CAAClD,aAAYqC,WAAUC,cAGpCa,IAAQP,EAAKG,UAGtBrB,EAAAC,EAAAC,cAACwB,EAAA,SAAD,KACI1B,EAAAC,EAAAC,cAACyB,EAAA,KAAD,KACE3B,EAAAC,EAAAC,cAAA,QAAM0B,QAAQ,UACd5B,EAAAC,EAAAC,cAAA,aAAQgB,EAAKW,QAEf7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACVc","file":"templates/src-containers-Post.d1506e60.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Runtime, Inspector} from \"@observablehq/notebook-runtime\";\nimport notebook from \"how-to-embed-a-notebook-in-a-react-app\";\n\nclass Observable extends Component {\n  state = {speed: 0.1};\n  animationRef = React.createRef();\n\n  componentDidMount() {\n    Runtime.load(notebook, (cell) => {\n      if (cell.name === \"animation\") {\n        return new Inspector(this.animationRef.current);\n      }\n      if (cell.name === \"mutable speed\") {\n        return {fulfilled: (value) => {\n          this.animationSpeed = value;\n        }};\n      }\n    });\n  }\n\n  componentDidUpdate(nextProps, nextState) {\n    if (nextState.speed !== this.state.speed) {\n      this.animationSpeed.value = nextState.speed;\n    }\n  }\n\n  setSpeed = (event) => {\n    this.setState({speed: event.target.valueAsNumber});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div ref={this.animationRef}></div>\n        <small>Speed: {this.state.speed}</small>\n        <br />\n        <input type=\"range\" min=\"0\" max=\"2\" step=\"0.1\"\n          value={this.state.speed} onChange={this.setSpeed} />\n      </div>\n    );\n  }\n}\n\nexport default Observable;","import React, {Component} from \"react\";\nimport {Runtime, Inspector} from \"@observablehq/notebook-runtime\";\nimport notebook from \"perception-illusion-part-i\";\n\nclass Illusion extends Component {\n  animationRef = React.createRef();\n\n  componentDidMount() {\n    Runtime.load(notebook, (cell) => {\n      if (cell.name === \"canvas\") {\n        return new Inspector(this.animationRef.current);\n      }\n\n    });\n  }\n\n\n  render() {\n    debugger;\n    return (\n      <div className=\"Illusion\">\n        <div ref={this.animationRef} ></div>\n      </div>\n    );\n  }\n}\n\nexport default Illusion;","import React, {Component} from \"react\";\nimport {Runtime, Inspector} from \"@observablehq/notebook-runtime\";\nimport notebook from \"hackaviz-toulouse-2018\";\n\n\n\nclass Hackaviz extends Component {\n\n  animationRef = React.createRef();\n\n\n  componentDidMount() {\n    console.log('please wait');\n    Runtime.load(notebook, (cell) => {\n      if (cell.name === \"carte\") {\n        return new Inspector(this.animationRef.current);\n      }\n\n    });\n  }\n\n\n  render() {\n    console.log('loading data');\n    return (\n      <div className=\"Hackaviz\" ref={this.animationRef}>\n\n      </div>\n    );\n  }\n}\n\nexport default Hackaviz;","import React, {Fragment} from 'react'\nimport {withRouteData, Link} from 'react-static'\nimport convert from 'htmr'\n//\nimport Observable from './Observable';\nimport Illusion from './Illusion';\nimport Hackaviz from './Hackaviz';\n//import Idyll from './Idyll';\n\nimport JsxParser from 'react-jsx-parser'\n//\nimport {Head} from 'react-static'\n\nexport default withRouteData(({post}) => {\n  let render;\n  if (post.render === 'jsx')\n    render = <JsxParser\n              jsx={post.contents}\n              showWarnings={true}\n              renderInWrapper={false}\n              components={{Observable, Illusion, Hackaviz}}\n            />\n  else\n    render = convert(post.contents); // default\n\n  return (\n    <Fragment>\n        <Head>\n          <meta charSet=\"UTF-8\" />\n          <title>{post.title}</title>\n        </Head>\n        <div className='post'>\n            {render}\n        </div>\n  </Fragment>\n)})\n"],"sourceRoot":""}